Mappings:
  ECRDLTImage:
    ImageURI:
      Value: public.ecr.aws/x2t0y6c0/aws-dlt/taurus-tester

Resources:
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-load-tester-logs
      RetentionInDays: 5
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ECSClusterDLT:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: DLT-ECS-Cluster

  ECSDLTBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-dltbucket
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !GetAtt ECSDLTBucket.Arn
                  - !Sub ${ECSDLTBucket.Arn}/*
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - !GetAtt ECSLogGroup.Arn
                  - !Sub ${ECSLogGroup.Arn}:log-stream:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

  ECSClusterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !FindInMap
            - ECRDLTImage
            - ImageURI
            - Value
          Name: !Sub ${AWS::StackName}-load-tester
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Cpu: '2048'
      Memory: '4096'
      Family: !Sub ${AWS::StackName}-task-family
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSTaskRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
    DependsOn: ECSClusterDLT

  TaskStatusCheckerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${FunctionName}
        - FunctionName: !Ref TaskStatusCheckerLambdaFunction
      RetentionInDays: 5
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  TaskStatusCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: TaskStatusCheckerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*' # use correct scope and try to remove circular dependency

  TaskStatusCheckerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: dlt-codes-akash
        S3Key: !Sub
          - ${KeyPrefix}/task-status-checker.zip
          - KeyPrefix: aws-dlt/1.0.0
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt TaskStatusCheckerRole.Arn
      Timeout: 180
      Environment:
        Variables:
          TEST_AWS_REGION: !Sub ${AWS::Region}

  TaskRunnerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${FunctionName}
        - FunctionName: !Ref TaskRunnerLambdaFunction
      RetentionInDays: 5
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  TaskRunnerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: TaskStatusCheckerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*' # use correct scope and try to remove circular dependency

  TaskRunnerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: dlt-codes-akash
        S3Key: !Sub
          - ${KeyPrefix}/task-runner.zip
          - KeyPrefix: aws-dlt/1.0.0
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt TaskRunnerRole.Arn
      Timeout: 180
      Environment:
        Variables:
          TEST_AWS_REGION: !Sub ${AWS::Region}
          SCENARIOS_BUCKET: !Ref ECSDLTBucket

  TaurusStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/states/taurusStateMachine-logs
      RetentionInDays: 5
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  IAMRoleForTaurusStateMachine:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:*
                Resource:
                  - !GetAtt TaskStatusCheckerLambdaFunction.Arn
                  - !GetAtt TaskRunnerLambdaFunction.Arn
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecs:*
                Resource: !Sub
                  - arn:${Partition}:ecs:${Region}:${AccountId}:task-definition/*:*
                  - Partition: !Ref AWS::Partition
                    Region: !Ref AWS::Region
                    AccountId: !Ref AWS::AccountId
          PolicyName: TaurusStateMachinePolicy

  TaurusStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionS3Location:
        Bucket: dlt-codes-akash
        Key: state-machine-files/taurus-test-task-handler.json
      RoleArn: !GetAtt IAMRoleForTaurusStateMachine.Arn
      StateMachineName: TaurusStateMachine
      DefinitionSubstitutions:
        TaskStatusCheckerLambdaFunction: !GetAtt TaskStatusCheckerLambdaFunction.Arn
        TaskRunnerLambdaFunction: !GetAtt TaskRunnerLambdaFunction.Arn
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt TaurusStateMachineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL

  RegionInfraTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: region
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: region
          AttributeType: S
      TableName: RegionInfraTable
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  TestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: test_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: test_id
          AttributeType: S
      TableName: TestsTable
      BillingMode: "PAY_PER_REQUEST"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  ApiServicesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !GetAtt RegionInfraTable.Arn
                  - !GetAtt TestsTable.Arn
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !GetAtt ECSDLTBucket.Arn
                  - !Sub ${ECSDLTBucket.Arn}/*
              - Effect: Allow
                Action:
                  - "states:*"
                Resource: !GetAtt TaurusStateMachine.Arn
          PolicyName: ApiServicesPolicy

  ApiServicesLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: dlt-codes-akash
        S3Key: !Sub
          - ${KeyPrefix}/api-services.zip
          - KeyPrefix: aws-dlt/1.0.0
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt ApiServicesFunctionRole.Arn
      Timeout: 180
      Environment:
        Variables:
          TEST_SCENARIOS_BUCKET: !Ref ECSDLTBucket
          TAURUS_STATE_MACHINE_ARN: !GetAtt TaurusStateMachine.Arn
          REGION_INFRA_TABLE: RegionInfraTable
          TESTS_TABLE: TestsTable
  
  ApiServicesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/lambda/${FunctionName}
        - FunctionName: !Ref ApiServicesLambdaFunction
      RetentionInDays: 5
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
