Mappings:
  ECRDLTImage: 
    ImageURI: 
      Value: public.ecr.aws/x2t0y6c0/aws-dlt/taurus-tester

Resources:
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 
        Fn::Sub: "${AWS::StackName}-load-tester-logs"
      RetentionInDays: 5
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  ECSClusterDLT:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: DLT-ECS-Cluster
  
  ECSDLTBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "${AWS::StackName}dltbucket"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: 
                - !GetAtt ECSDLTBucket.Arn
                - !Sub "${ECSDLTBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: 
                  - !GetAtt ECSLogGroup.Arn
                  - !Sub "${ECSLogGroup.Arn}:log-stream:*"

  ECSClusterTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !FindInMap [ ECRDLTImage, ImageURI, Value ]
          Name:
            Fn::Sub: "${AWS::StackName}-load-tester"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Cpu: '2048'
      Memory: '4096'
      Family: 
        Fn::Sub: "${AWS::StackName}-task-family"
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSTaskRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
    DependsOn: ECSClusterDLT

  TaskStatusCheckerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 
        Fn::Sub: 
          - "/aws/lambda/${FunctionName}"
          - FunctionName: !Ref TaskStatusCheckerLambdaFunction
      RetentionInDays: 5
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  TaskStatusCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: TaskStatusCheckerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:ListTasks"
                  - "ecs:DescribeTasks"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: "*" # use correct scope and try to remove circular dependency

  TaskStatusCheckerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: dlt-testing-codes-akash
        S3Key:
          Fn::Sub:
            - "${KeyPrefix}/task-status-checker.zip"
            - KeyPrefix: aws-dlt/1.0.1
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt TaskStatusCheckerRole.Arn
      Timeout: 180
